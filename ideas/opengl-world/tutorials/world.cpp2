#include <GL/gl.h>
#include <GL/glut.h>
#include <math.h>
#include <iostream>


#define CAM_MOVE_UP 'w'
#define CAM_MOVE_LEFT 'a'
#define CAM_MOVE_RIGHT 'd'
#define CAM_MOVE_DOWN 's'

using namespace std;

void printVertex() {
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);

	glBegin(GL_LINES);

	glColor3d(1.0, 0.0, 0.0);
	glVertex3d(0.0, 0.0, 0.0);
	glVertex3d(1.0, 0.0, 0.0);

	glColor3d(0.0, 1.0, 0.0);
	glVertex3d(0.0, 0.0, 0.0);
	glVertex3d(0.0, 1.0, 0.0);

	glColor3d(0.0, 0.0, 1.0);
	glVertex3d(0.0, 0.0, 0.0);
	glVertex3d(0.0, 0.0, 1.0);

	glEnd();

	glFlush();
}

void reshape (int width, int height) {
	glViewport(0, 0, width, height);
}

int main(int argc, char* argv[]){

	/* Init Glut using command line args */
	glutInit(&argc, argv);

	//Set the window size, display type and position
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(800, 800);
	glutInitDisplayMode(GLUT_RGB);

	//Create and display the glut window
	glutCreateWindow("Fracture RPG");


	//glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	glutDisplayFunc(printVertex);
	glutKeyboardFunc(keypress);
	glutTimerFunc(25, update, 0);

	glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );

	//define the projection matrix
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	double dist = sqrt( 1 / 3.0 );
	gluLookAt(dist, dist, dist,
		     0,    0,    0,
		     0,    0,    0);

	//define the viewing transformation
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	printVertex();

	//enter glut main loop
	glutMainLoop();
}
