#include <GL/gl.h>
#include <GL/glut.h>
#include <iostream>


#define CAM_MOVE_UP 'w'
#define CAM_MOVE_LEFT 'a'
#define CAM_MOVE_RIGHT 'd'
#define CAM_MOVE_DOWN 's'

using namespace std;

int teapot_x = 0;
int teapot_y = 0;


void floorTile(int x, int z){
	glColor3f(0.0,0.9,0.0);
	glBegin(GL_QUADS);
		glVertex3f(x, 0.0, z);
		glVertex3f(x, 0.0, z+1);
		glVertex3f(x+1, 0.0, z+1);
		glVertex3f(x+1, 0.0, z);
	glEnd();

}

void wallSegmentX(int x, int z){
	glColor3f(0.0,0.0,0.9);
	glBegin(GL_QUADS);
		glVertex3f(x, 0.0, z);
		glVertex3f(x+1, 0.0, z);
		glVertex3f(x+1, 2.0, z);
		glVertex3f(x, 2.0, z);
	glEnd();

}

void wallSegmentZ(int x, int z){
	glColor3f(0.0, 0.0, 0.9);
	glBegin(GL_QUADS);
		glVertex3f(x, 0.0, z);
		glVertex3f(x, 0.0, z+1);
		glVertex3f(x, 2.0, z+1);
		glVertex3f(x, 2.0, z);
	glEnd();
}

void doorX(int x, int z){
	glColor3f(0.9,0,0);
	glBegin(GL_QUADS);
		glVertex3f(x+0.15, 0.0, z);
		glVertex3f(x+0.85, 0.0, z);
		glVertex3f(x+0.85, 1.8, z);
		glVertex3f(x+0.15, 1.8, z);
	glEnd();
}

void keypress(unsigned char key, int x, int y) {
	switch (key) {
		case CAM_MOVE_DOWN:
			teapot_x++;
			cout << "pressed down" << endl;
			break;

		case CAM_MOVE_UP:
			teapot_x--;
			cout << "pressed up" << endl;
			break;

		case CAM_MOVE_LEFT:
			teapot_y--;
			cout << "pressed left" << endl;
			break;

		case CAM_MOVE_RIGHT:
			teapot_y++;
			cout << "pressed right" << endl;
			break;
	}
}

void update(int value) {

	if (teapot_x < 0) teapot_x = 0;
	if (teapot_y < 0) teapot_y = 0;

	glutPostRedisplay();
	glutTimerFunc(25, update, 0);
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);
	
	glPushMatrix();
	glTranslatef(-teapot_x, 0, -teapot_y);

	//Set the to the model view matrix
	glMatrixMode(GL_MODELVIEW);

	for (int x=0; x<10; x++){
		for(int y=0; y<10; y++){
			floorTile(x, y);
		}
	}
	
	for (int n=0; n<10; n++){
		wallSegmentX(n,0);
		wallSegmentZ(0, n);
	}

	doorX(5,0);


	glPushMatrix();
		glTranslatef(teapot_x, 0.0f, teapot_y);
		glColor3f(1, 1, 1);
		glutWireTeapot(.5);	
	glPopMatrix();

	glPopMatrix();

	glFlush();
}

void reshape (int width, int height) {
	glViewport(0, 0, width, height);
}

int main(int argc, char* argv[]){

	/* Init Glut using command line args */
	glutInit(&argc, argv);

	//Set the window size, display type and position
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(800, 800);
	glutInitDisplayMode(GLUT_RGB);

	//Create and display the glut window
	glutCreateWindow("Fracture RPG");
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keypress);
	glutTimerFunc(25, update, 0);

	glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );

	//define the projection matrix
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(teapot_x-5, teapot_x+5, teapot_x-5, teapot_x+5, teapot_y-5, teapot_y+5);

	//define the viewing transformation
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(1.0,1.0,1.0,5,5,5,0.0,1.0,0.0);

	//enter glut main loop
	glutMainLoop();
}
